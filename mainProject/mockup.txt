 COMO RECORDAR LA FECHA 
 import React from "react"
import Button from "react-bootstrap/Button"
import ModalBs from "react-bootstrap/Modal"
import { Formik, Form, Field, ErrorMessage } from "formik"
import * as Yup from "yup"
import FormBs from "react-bootstrap/Form"

const Modal = (props) => {
    const formatDate = (date) => {
        if (!date) return "";
        const d = new Date(date);
        return d.toISOString().split("T")[0];
    }

    const initialValues = {
        name: props.item.name || "",
        description: props.item.description || "",
        stock: props.item.stock || "",
        price: props.item.price || "",
        date: formatDate(props.item.date) || formatDate(new Date()),
        expireDate: formatDate(props.item.expireDate) || formatDate(new Date()),
        lote: props.item.lote || "",
    }

    const formSchema = Yup.object().shape({
        // ... (el resto del schema permanece igual)
    })

    return (
        <>
            <ModalBs
                {...props}
                size="lg"
                aria-labelledby="contained-modal-title-vcenter"
                centered
            >
                <ModalBs.Header closeButton className="bg-dark">
                    <ModalBs.Title id="contained-modal-title-vcenter">
                        {props.item.id ? "Editar Producto" : "Nuevo Producto"}
                    </ModalBs.Title>
                </ModalBs.Header>
                <ModalBs.Body className="bg-dark">
                    <Formik
                        initialValues={initialValues}
                        validationSchema={formSchema}
                        onSubmit={async (values, { setSubmitting }) => {
                            console.log(values)
                            await props.onSubmit(props.item.id, values)
                            setSubmitting(false)
                            props.onHide()
                        }}
                    >
                        {({
                            values,
                            isSubmitting,
                            errors,
                            touched,
                            handleChange,
                        }) => (
                            <Form>
                                {/* ... (los otros campos permanecen iguales) */}
                                
                                <FormBs.Group className="mb-3">
                                    <label htmlFor="date">
                                        Fecha de Compra
                                    </label>
                                    <Field
                                        onChange={handleChange}
                                        className="form-control field-input"
                                        id="date"
                                        type="date"
                                        name="date"
                                    />
                                    {errors.date && touched.date && (
                                        <ErrorMessage
                                            name="date"
                                            component="div"
                                        />
                                    )}
                                </FormBs.Group>

                                <FormBs.Group className="mb-3">
                                    <label htmlFor="expireDate">
                                        Fecha de Vencimiento
                                    </label>
                                    <Field
                                        onChange={handleChange}
                                        className="form-control field-input"
                                        id="expireDate"
                                        type="date"
                                        name="expireDate"
                                    />
                                    {errors.expireDate &&
                                        touched.expireDate && (
                                            <ErrorMessage
                                                name="expireDate"
                                                component="div"
                                            />
                                        )}
                                </FormBs.Group>

                                {/* ... (el resto del formulario permanece igual) */}

                                <Button
                                    className="btn btn-primary"
                                    type="submit"
                                >
                                    {props.item.id ? "Actualizar producto" : "Cargar nuevo producto"}
                                </Button>
                                {isSubmitting ? (
                                    <p>Enviando datos del Producto </p>
                                ) : null}
                            </Form>
                        )}
                    </Formik>
                </ModalBs.Body>
                <ModalBs.Footer className="bg-dark">
                    <Button onClick={props.onHide}>Cerrar</Button>
                </ModalBs.Footer>
            </ModalBs>
        </>
    )
}

export default Modal



